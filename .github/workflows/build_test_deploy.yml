on:
  workflow_dispatch:

name: Build, test, and deploy

env:
  NAPI_CLI_VERSION: 2.7.0
  TURBO_VERSION: 1.3.2-canary.1
  RUST_TOOLCHAIN: nightly-2022-02-23
  PNPM_VERSION: 7.2.1

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      NEXT_TELEMETRY_DISABLED: 1
      # we build a dev binary for use in CI so skip downloading
      # canary next-swc binaries in the monorepo
      NEXT_SKIP_NATIVE_POSTINSTALL: 1
    outputs:
      docsChange: ${{ steps.docs-change.outputs.DOCS_CHANGE }}
      isRelease: ${{ steps.check-release.outputs.IS_RELEASE }}
      weekNum: ${{ steps.get-week.outputs.WEEK }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ steps.docs-change.outputs.docsChange == 'nope' }}
        with:
          node-version: 16
          check-latest: true

      - uses: actions/checkout@v3
        with:
          fetch-depth: 25

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - name: Check non-docs only change
        run: echo ::set-output name=DOCS_CHANGE::$(node scripts/run-for-change.js --not --type docs --exec echo 'nope')
        id: docs-change

      - run: echo ${{steps.docs-change.outputs.DOCS_CHANGE}}

      - run: npm i -g pnpm@${PNPM_VERSION}

      - id: get-store-path
        run: echo ::set-output name=STORE_PATH::$(pnpm store path)

      - uses: actions/cache@v3
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

      - run: pnpm install
      - run: pnpm run build
      - run: node run-tests.js --timings --write-timings -g 1/1
      - run: node ./scripts/fetch-tags.mjs ${{ github.sha }}

      - id: check-release
        run: |
          if [[ $(git describe --exact-match 2> /dev/null || :) = v* ]];
            then
              echo "::set-output name=IS_RELEASE::true"
            else
              echo "::set-output name=IS_RELEASE::false"
          fi
      # We use week in the turbo cache key to keep the cache from infinitely growing
      - id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      - uses: actions/cache@v3
        id: cache-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

  build-native-test:
    name: Build native binary for tests and metrics
    runs-on: ubuntu-18.04
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/checkout@v3
        with:
          fetch-depth: 25

      - run: echo ::set-output name=DOCS_CHANGE::$(node scripts/run-for-change.js --not --type docs --exec echo 'nope')
        id: docs-change

      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        with:
          node-version: 16
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        with:
          path: ~/.cargo/registry
          key: stable-ubuntu-18.04-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v3
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        with:
          path: ~/.cargo/git
          key: stable-ubuntu-18.04-cargo-index

      # We use week in the turbo cache key to keep the cache from infinitely growing
      - id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-
            turbo-${{ github.job }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-
            turbo-${{ github.job }}-canary-${{ steps.get-week.outputs.WEEK }}-

      # We use restore-key to pick latest cache.
      # We will not get exact match, but doc says
      # "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
      # So we get latest cache
      - name: Cache built files
        uses: actions/cache@v3
        with:
          path: ./packages/next-swc/target
          key: next-swc-cargo-cache-dev-ubuntu-18.04-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            next-swc-cargo-cache-dev-ubuntu-18.04

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@${{ env.NAPI_CLI_VERSION }} turbo@${{ env.TURBO_VERSION }} pnpm@${PNPM_VERSION}
      - name: Build
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        run: turbo run build-native --cache-dir=".turbo" -- --release
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: next-swc-test-binary
          path: packages/next-swc/native/next-swc.linux-x64-gnu.node

      - name: Clear the cargo caches
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache

  test-native:
    name: Unit Test Native Code
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 25

      - run: echo ::set-output name=SWC_CHANGE::$(node scripts/run-for-change.js --type next-swc --exec echo 'yup')
        id: swc-change

      - run: echo ${{ steps.swc-change.outputs.SWC_CHANGE }}

      - name: Install
        if: ${{ steps.swc-change.outputs.SWC_CHANGE == 'yup' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          profile: minimal

      - run: cd packages/next-swc && cargo test
        if: ${{ steps.swc-change.outputs.SWC_CHANGE == 'yup' }}

  test-wasm:
    name: Test the wasm build
    runs-on: ubuntu-18.04
    needs: [build, build-native-test, build-wasm-dev]

    steps:
      - uses: actions/cache@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - uses: actions/download-artifact@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          name: wasm-dev-binary
          path: packages/next-swc/crates/wasm/pkg-nodejs

      - run: ls packages/next-swc/crates/wasm
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - uses: actions/download-artifact@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          name: next-swc-test-binary
          path: packages/next-swc/native

      # node version needs to be 16+ to use --no-addons option
      - name: Setup node
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      - run: npm i -g playwright-chromium@1.22.2 && npx playwright install-deps
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: node ./scripts/setup-wasm.mjs
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: npm i -g pnpm@${PNPM_VERSION}
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: TEST_WASM=true xvfb-run node run-tests.js test/integration/production/test/index.test.js
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: TEST_WASM=true xvfb-run node run-tests.js test/production/react-18-streaming-ssr/index.test.ts
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  build-wasm-dev:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/cache@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Setup node
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      - run: npm i -g turbo@${{ env.TURBO_VERSION }} pnpm@${PNPM_VERSION}

      - name: Install Rust
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          target: wasm32-unknown-unknown

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}

        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-
            turbo-${{ github.job }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-
            turbo-${{ github.job }}-canary-${{ steps.get-week.outputs.WEEK }}-

      - name: Install wasm-pack
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: turbo run build-wasm --cache-dir=".turbo" -- --target nodejs --dev

      - name: Add target to folder name
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: '[[ -d "packages/next-swc/crates/wasm/pkg" ]] && mv packages/next-swc/crates/wasm/pkg packages/next-swc/crates/wasm/pkg-nodejs || ls packages/next-swc/crates/wasm'

      - name: Upload artifact
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        uses: actions/upload-artifact@v3
        with:
          name: wasm-dev-binary
          path: packages/next-swc/crates/wasm/pkg-nodejs
